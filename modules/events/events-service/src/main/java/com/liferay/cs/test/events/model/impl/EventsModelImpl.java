/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.cs.test.events.model.impl;

import com.liferay.cs.test.events.model.Events;
import com.liferay.cs.test.events.model.EventsModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Events service. Represents a row in the &quot;CS_Events&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EventsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventsImpl}.
 * </p>
 *
 * @author Liferay CS
 * @see EventsImpl
 * @generated
 */
@JSON(strict = true)
public class EventsModelImpl
	extends BaseModelImpl<Events> implements EventsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a events model instance should use the <code>Events</code> interface instead.
	 */
	public static final String TABLE_NAME = "CS_Events";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"eventId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"department", Types.VARCHAR}, {"visibility", Types.INTEGER},
		{"maxCount", Types.INTEGER}, {"startDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("department", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visibility", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("maxCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CS_Events (uuid_ VARCHAR(75) null,eventId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(75) null,department VARCHAR(75) null,visibility INTEGER,maxCount INTEGER,startDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table CS_Events";

	public static final String ORDER_BY_JPQL = " ORDER BY events.name ASC";

	public static final String ORDER_BY_SQL = " ORDER BY CS_Events.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DEPARTMENT_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EventsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Events.class;
	}

	@Override
	public String getModelClassName() {
		return Events.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Events, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Events, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Events, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Events)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Events, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Events, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Events)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Events, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Events, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Events, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Events, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Events, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Events, Object>>();
		Map<String, BiConsumer<Events, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Events, ?>>();

		attributeGetterFunctions.put("uuid", Events::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Events, String>)Events::setUuid);
		attributeGetterFunctions.put("eventId", Events::getEventId);
		attributeSetterBiConsumers.put(
			"eventId", (BiConsumer<Events, Long>)Events::setEventId);
		attributeGetterFunctions.put("groupId", Events::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Events, Long>)Events::setGroupId);
		attributeGetterFunctions.put("companyId", Events::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Events, Long>)Events::setCompanyId);
		attributeGetterFunctions.put("userId", Events::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Events, Long>)Events::setUserId);
		attributeGetterFunctions.put("userName", Events::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Events, String>)Events::setUserName);
		attributeGetterFunctions.put("createDate", Events::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Events, Date>)Events::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Events::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Events, Date>)Events::setModifiedDate);
		attributeGetterFunctions.put("name", Events::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Events, String>)Events::setName);
		attributeGetterFunctions.put("description", Events::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Events, String>)Events::setDescription);
		attributeGetterFunctions.put("department", Events::getDepartment);
		attributeSetterBiConsumers.put(
			"department", (BiConsumer<Events, String>)Events::setDepartment);
		attributeGetterFunctions.put("visibility", Events::getVisibility);
		attributeSetterBiConsumers.put(
			"visibility", (BiConsumer<Events, Integer>)Events::setVisibility);
		attributeGetterFunctions.put("maxCount", Events::getMaxCount);
		attributeSetterBiConsumers.put(
			"maxCount", (BiConsumer<Events, Integer>)Events::setMaxCount);
		attributeGetterFunctions.put("startDate", Events::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate", (BiConsumer<Events, Date>)Events::setStartDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eventId = eventId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getDepartment() {
		if (_department == null) {
			return "";
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_department = department;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDepartment() {
		return getColumnOriginalValue("department");
	}

	@JSON
	@Override
	public int getVisibility() {
		return _visibility;
	}

	@Override
	public void setVisibility(int visibility) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_visibility = visibility;
	}

	@JSON
	@Override
	public int getMaxCount() {
		return _maxCount;
	}

	@Override
	public void setMaxCount(int maxCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maxCount = maxCount;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Events.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Events.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Events toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Events>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventsImpl eventsImpl = new EventsImpl();

		eventsImpl.setUuid(getUuid());
		eventsImpl.setEventId(getEventId());
		eventsImpl.setGroupId(getGroupId());
		eventsImpl.setCompanyId(getCompanyId());
		eventsImpl.setUserId(getUserId());
		eventsImpl.setUserName(getUserName());
		eventsImpl.setCreateDate(getCreateDate());
		eventsImpl.setModifiedDate(getModifiedDate());
		eventsImpl.setName(getName());
		eventsImpl.setDescription(getDescription());
		eventsImpl.setDepartment(getDepartment());
		eventsImpl.setVisibility(getVisibility());
		eventsImpl.setMaxCount(getMaxCount());
		eventsImpl.setStartDate(getStartDate());

		eventsImpl.resetOriginalValues();

		return eventsImpl;
	}

	@Override
	public Events cloneWithOriginalValues() {
		EventsImpl eventsImpl = new EventsImpl();

		eventsImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		eventsImpl.setEventId(this.<Long>getColumnOriginalValue("eventId"));
		eventsImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		eventsImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		eventsImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		eventsImpl.setUserName(this.<String>getColumnOriginalValue("userName"));
		eventsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		eventsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		eventsImpl.setName(this.<String>getColumnOriginalValue("name"));
		eventsImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		eventsImpl.setDepartment(
			this.<String>getColumnOriginalValue("department"));
		eventsImpl.setVisibility(
			this.<Integer>getColumnOriginalValue("visibility"));
		eventsImpl.setMaxCount(
			this.<Integer>getColumnOriginalValue("maxCount"));
		eventsImpl.setStartDate(this.<Date>getColumnOriginalValue("startDate"));

		return eventsImpl;
	}

	@Override
	public int compareTo(Events events) {
		int value = 0;

		value = getName().compareTo(events.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Events)) {
			return false;
		}

		Events events = (Events)object;

		long primaryKey = events.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Events> toCacheModel() {
		EventsCacheModel eventsCacheModel = new EventsCacheModel();

		eventsCacheModel.uuid = getUuid();

		String uuid = eventsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			eventsCacheModel.uuid = null;
		}

		eventsCacheModel.eventId = getEventId();

		eventsCacheModel.groupId = getGroupId();

		eventsCacheModel.companyId = getCompanyId();

		eventsCacheModel.userId = getUserId();

		eventsCacheModel.userName = getUserName();

		String userName = eventsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			eventsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			eventsCacheModel.createDate = createDate.getTime();
		}
		else {
			eventsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eventsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eventsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		eventsCacheModel.name = getName();

		String name = eventsCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			eventsCacheModel.name = null;
		}

		eventsCacheModel.description = getDescription();

		String description = eventsCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			eventsCacheModel.description = null;
		}

		eventsCacheModel.department = getDepartment();

		String department = eventsCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			eventsCacheModel.department = null;
		}

		eventsCacheModel.visibility = getVisibility();

		eventsCacheModel.maxCount = getMaxCount();

		Date startDate = getStartDate();

		if (startDate != null) {
			eventsCacheModel.startDate = startDate.getTime();
		}
		else {
			eventsCacheModel.startDate = Long.MIN_VALUE;
		}

		return eventsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Events, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Events, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Events, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Events)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Events>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Events.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _eventId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _description;
	private String _department;
	private int _visibility;
	private int _maxCount;
	private Date _startDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Events, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Events)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("eventId", _eventId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("department", _department);
		_columnOriginalValues.put("visibility", _visibility);
		_columnOriginalValues.put("maxCount", _maxCount);
		_columnOriginalValues.put("startDate", _startDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("eventId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("name", 256L);

		columnBitmasks.put("description", 512L);

		columnBitmasks.put("department", 1024L);

		columnBitmasks.put("visibility", 2048L);

		columnBitmasks.put("maxCount", 4096L);

		columnBitmasks.put("startDate", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Events _escapedModel;

}